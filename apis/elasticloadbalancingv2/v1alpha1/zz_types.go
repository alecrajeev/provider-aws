/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

type AvailabilityZone struct {
	LoadBalancerAddresses []*LoadBalancerAddress `json:"loadBalancerAddresses,omitempty"`

	OutpostID *string `json:"outpostID,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	ZoneName *string `json:"zoneName,omitempty"`
}

type Listener struct {
	LoadBalancerARN *string `json:"loadBalancerARN,omitempty"`
}

type LoadBalancerAddress struct {
	AllocationID *string `json:"allocationID,omitempty"`

	IPv6Address *string `json:"iPv6Address,omitempty"`

	IPAddress *string `json:"ipAddress,omitempty"`

	PrivateIPv4Address *string `json:"privateIPv4Address,omitempty"`
}

type LoadBalancerState struct {
	Code *string `json:"code,omitempty"`

	Reason *string `json:"reason,omitempty"`
}

type LoadBalancer_SDK struct {
	AvailabilityZones []*AvailabilityZone `json:"availabilityZones,omitempty"`

	CanonicalHostedZoneID *string `json:"canonicalHostedZoneID,omitempty"`

	CreatedTime *metav1.Time `json:"createdTime,omitempty"`

	CustomerOwnedIPv4Pool *string `json:"customerOwnedIPv4Pool,omitempty"`

	DNSName *string `json:"dnsName,omitempty"`

	IPAddressType *string `json:"ipAddressType,omitempty"`

	LoadBalancerARN *string `json:"loadBalancerARN,omitempty"`

	LoadBalancerName *string `json:"loadBalancerName,omitempty"`

	Scheme *string `json:"scheme,omitempty"`

	SecurityGroups []*string `json:"securityGroups,omitempty"`
	// Information about the state of the load balancer.
	State *LoadBalancerState `json:"state,omitempty"`

	Type *string `json:"type_,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

type SubnetMapping struct {
	AllocationID *string `json:"allocationID,omitempty"`

	IPv6Address *string `json:"iPv6Address,omitempty"`

	PrivateIPv4Address *string `json:"privateIPv4Address,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`
}

type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

type TagDescription struct {
	Tags []*Tag `json:"tags,omitempty"`
}

type TargetDescription struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
}

type TargetGroup struct {
	LoadBalancerARNs []*string `json:"loadBalancerARNs,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}
